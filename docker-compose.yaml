name: ai-stack

networks:
  ai-local-net:

volumes:
  ai-stack-flowise-data:
  ai-stack-localai-data:
  ai-stack-postgres-data:
  ai-stack-redis-data:
  ai-stack-opensearch-data:

services:

  postgres:
    image: pgvector/pgvector:pg17
    env_file: 
    - .env_files/.postgres.yaml
    - .env_files/.postgres.secrets.yaml
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "aistack", "-d", "aistack"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 3s
    networks:
    - ai-local-net
    volumes:
    - ai-stack-postgres-data:/var/lib/postgresql/data
    - .env_files/.postgres.init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    image: redis:7.4.1-alpine3.20
    command: >
      sh
      -c
      "redis-server
      --requirepass $${REDIS_PASSWORD}
      --save $${REDIS_SAVE}
      --loglevel $${REDIS_LOGLEVEL}"
    env_file: 
    - .env_files/.redis.yaml
    - .env_files/.redis.secrets.yaml
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 3s
    networks:
    - ai-local-net
    volumes:
    - ai-stack-redis-data:/data

  localai:
    image: localai/localai:v2.24.2-cublas-cuda12-ffmpeg
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            count: all
            capabilities: [gpu]
    env_file: 
    - .env_files/.localai.yaml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/readyz"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 15s
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.localai.rule=Host(`localai.localhost`)"
    - "traefik.http.routers.localai.entrypoints=http"
    networks:
    - ai-local-net
    volumes:
    - ai-stack-localai-data:/build/models:cached

  flowise:
    image: flowiseai/flowise:2.2.3
    depends_on:
    - postgres
    - localai
    - redis
    entrypoint: /bin/sh -c "flowise start"
    env_file: 
    - .env_files/.flowise.yaml
    - .env_files/.flowise.secrets.yaml
    - .env_files/.postgres.secrets.yaml
    expose:
    - 3000/tcp
    healthcheck:
      test: ["CMD", "wget", "-q", "http://127.0.0.1:3000", "-O", "/dev/null"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 10s
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.flowise.rule=Host(`flowise.localhost`)"
    - "traefik.http.routers.flowise.entrypoints=http"
    networks:
    - ai-local-net
    volumes:
    - ai-stack-flowise-data:/root/.flowise

  opensearch:
    image: opensearchproject/opensearch:latest
    env_file:
    - .env_files/.opensearch.yaml
    - .env_files/.opensearch.secrets.yaml
    networks:
    - ai-local-net
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
    - ai-stack-opensearch-data:/usr/share/opensearch/data

  traefik:
    image: traefik:v3.2.3
    depends_on:
    - postgres
    - localai
    - redis
    - flowise
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 10s
    networks:
    - ai-local-net
    ports:
    - 127.0.0.1:80:80
    - 127.0.0.1:443:443
    - 127.0.0.1:13337:13337
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - .env_files/.traefik.yaml:/etc/traefik/traefik.yaml:ro

